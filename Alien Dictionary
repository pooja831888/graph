public String findOrder(String[] dict, int N, int K) {
    // Step 1: Build the graph
    ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
    for (int i = 0; i < K; i++) {
        adj.add(new ArrayList<>());
    }

    for (int i = 0; i < N - 1; i++) {
        String word1 = dict[i];
        String word2 = dict[i + 1];
        int len = Math.min(word1.length(), word2.length());

        for (int j = 0; j < len; j++) {
            char c1 = word1.charAt(j);
            char c2 = word2.charAt(j);
            if (c1 != c2) {
                adj.get(c1 - 'a').add(c2 - 'a'); // Directed edge from c1 to c2
                break;
            }
        }
    }

    // Step 2: Calculate indegree
    int[] indegree = new int[K];
    for (int u = 0; u < K; u++) {
        for (int v : adj.get(u)) {
            indegree[v]++;
        }
    }

    // Step 3: BFS - Kahn's Algo
    Queue<Integer> q = new LinkedList<>();
    for (int i = 0; i < K; i++) {
        if (indegree[i] == 0)
            q.add(i);
    }

    StringBuilder sb = new StringBuilder();
    while (!q.isEmpty()) {
        int node = q.poll();
        sb.append((char) (node + 'a'));
        for (int neighbor : adj.get(node)) {
            indegree[neighbor]--;
            if (indegree[neighbor] == 0)
                q.add(neighbor);
        }
    }

    return sb.toString();
}
