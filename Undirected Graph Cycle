public boolean isCycle(int V, int[][] edges) {
    ArrayList<ArrayList<Integer>> adj = new ArrayList<>();
    for (int i = 0; i < V; i++) {
        adj.add(new ArrayList<>());
    }
    for (int i = 0; i < edges.length; i++) {
        adj.get(edges[i][0]).add(edges[i][1]);
        adj.get(edges[i][1]).add(edges[i][0]);
    }
    
    boolean [] visited = new boolean[V];
    for (int i = 0; i < V; i++) {
        if (!visited[i]) {
            if (dfs(-1, i, adj, visited)) {
                return true;
            }
        }
    }
    return false;
}

public boolean dfs(int parent, int node, ArrayList<ArrayList<Integer>> adj,
                    boolean [] visited) {
    visited[node] = true;

    for (int neighbour : adj.get(node)) {
        if (!visited[neighbour]) {
            if (dfs(node, neighbour, adj, visited)) {
                return true;
            }
        } else if (neighbour != parent) {
            return true;
        }
    }

    return false;
}
