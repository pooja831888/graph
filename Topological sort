class Solution {
    public static ArrayList<Integer> topoSort(int V, int[][] edges) {
        
        List<List<Integer>> adj = new ArrayList<>();
        
        for (int i = 0; i < V; i++) {
            adj.add(new ArrayList<>());
        }
        
        for (int i = 0; i < edges.length; i++) {
            adj.get(edges[i][0]).add(edges[i][1]);
        }
        
        boolean[] visited = new boolean[V];
        Stack<Integer> st = new Stack<>();
        
        for (int i = 0; i < V; i++) {
            if (!visited[i]) {
                dfs(i, visited, adj, st);
            }
        }
        
        ArrayList<Integer> list = new ArrayList<>();
        while (!st.isEmpty()) {
            int node = st.pop();
            list.add(node);
        }
        
        return list;
    }

    public static void dfs(int node, boolean[] visited, List<List<Integer>> adj, Stack<Integer> st) {
        visited[node] = true;
        
        for (int neighbour : adj.get(node)) {
            if (!visited[neighbour]) {
                dfs(neighbour, visited, adj, st);
            }
        }
        st.push(node);
    }

}
