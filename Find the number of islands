public int countIslands(char[][] grid) {
    int rows = grid.length;
    int cols = grid[0].length;
    
    boolean[][] visited = new boolean[rows][cols];
    int count = 0;
    
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < cols; j++) {
            if (grid[i][j] == '1' && !visited[i][j]) {
                dfs(i, j, grid, visited);
                count++;
            }
        }
    }
    
    return count;
}

private void dfs(int row, int col, char[][] grid, boolean[][] visited) {
    int[] dx = {-1, 0, 1, 0}; // up, right, down, left
    int[] dy = {0, 1, 0, -1};
    
    visited[row][col] = true;
    
    for (int k = 0; k < 4; k++) {
        int newRow = row + dx[k];
        int newCol = col + dy[k];
        
        if (isSafe(newRow, newCol, grid, visited)) {
            dfs(newRow, newCol, grid, visited);
        }
    }
}


private boolean isSafe(int row, int col, char[][] grid, boolean[][] visited) {
    return row >= 0 && row < grid.length && col >= 0 && col < grid[0].length
           && grid[row][col] == '1' && !visited[row][col];
}
}
